from fastapi import FastAPI, Depends, HTTPException, statusfrom fastapi.security import OAuth2PasswordBearerfrom pydantic import BaseModelfrom loguru import loggerfrom .config import load_configfrom .pipeline import RAGPipeline, PipelineError# Initialize FastAPI appapp = FastAPI(title="Restaurant Q&A System")oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")  # Placeholder for auth# Load configurationconfig = load_config()# Initialize pipelinepipeline = RAGPipeline(config)# Pydantic models for APIclass QueryRequest(BaseModel):    question: strclass QueryResponse(BaseModel):    answer: str    sources: str# API endpoint@app.post("/query", response_model=QueryResponse)async def query(request: QueryRequest, token: str = Depends(oauth2_scheme)):    try:        answer, sources = pipeline.answer_query(request.question)        return QueryResponse(answer=answer, sources=sources)    except PipelineError as e:        raise HTTPException(status_code=500, detail=str(e))# Health check@app.get("/health")async def health():    return {"status": "healthy"}if __name__ == "__main__":    import uvicorn    uvicorn.run(app, host="0.0.0.0", port=8000)